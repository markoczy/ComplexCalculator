/**
 * Complex Calculator - Complex math equation solver
 * Copyright (C) 2016  Aleistar Markóczy, a.markoczy@gmail.com
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/gpl-3.0.html.
 */
package mkz.cc.core.parser;

import java.util.ArrayList;
import java.util.Arrays;

import mkz.cc.core.common.CC_Common;
import mkz.cc.core.equation.Equation;
import mkz.cc.core.equation.EquationFactory;
import mkz.cc.core.equation.definition.IEquation;
import mkz.cc.core.equation.definition.IParametrizable;
import mkz.cc.core.equation.function.FunctionPool;
import mkz.cc.core.equation.function.ParamLinearEquation;
import mkz.cc.core.equation.function.Variable;
import mkz.cc.core.equation.linear.LinearEquation;
import mkz.cc.util.IO;

public final class FunctionParser extends EquationParser
{
	private static FunctionPool functions = FunctionPool.getInstance();
	
	private ArrayList<IParametrizable> mTopLevelParams;	
	
	private ArrayList<String> mParamNames;
	
	public boolean parseFunction(String aEquation)
	{
		//
		// e.g. f(x):=2*x
		//
		//
		
		mCursor = new ParserCursor();
		mTopLevelParams = new ArrayList<IParametrizable>();
		
		String lName=_parseIdentifier(aEquation, mCursor);
		
		if(functions.getFuncion(lName)!=null) 
		{
			IO.SysOutE("Cannot add function: Name is not unique");
			return false;
		}
		
		mParamNames = _parseParamNames(aEquation, mCursor);
		for(String iParam:mParamNames) IO.SysOutV("Found param: "+iParam);
		
		IO.SysOutD("Current char = "+mCursor.get(aEquation));
		
		if(!_parseFcnDefOf(aEquation,mCursor))
		{
			IO.SysOutE("Function definition operator not found.");
			return false;
		}
		
		IEquation lNewFunction=_parseEquation(aEquation, mCursor);
		
		if(lNewFunction instanceof ParamLinearEquation)
		{
			ParamLinearEquation lEquation=(ParamLinearEquation)lNewFunction;
			IO.SysOutD("Added "+mTopLevelParams.size()+" logical param(s)");
			functions.addFunction(lName, lName, mParamNames, aEquation, lEquation);
			return true;
		}
		else
		{
			IO.SysOutE("Implementation fault: Parsed an invalid function type, type is: "+lNewFunction.getClass().getCanonicalName());
			return false;
		}
	}
	
	private boolean _parseFcnDefOf(String aEquation, ParserCursor aCursor)
	{
		if(aCursor.get(aEquation)==':')
		{
			aCursor.next();
			if(aCursor.get(aEquation)=='=')
			{
				aCursor.next();
				return true;
			}
		}
		
		return false;
	}
	
	
	private ArrayList<String> _parseParamNames(String equation, ParserCursor aCursor)
	{
		ArrayList<String> rVal = new ArrayList<String>();
		if (!CC_Common.isParOpen(aCursor.get(equation))) return rVal;
		aCursor.next();

		String lParams = new String();
		while (!aCursor.exceeds(equation) && !CC_Common.isParClose(aCursor.get(equation)))
		{
			lParams += aCursor.get(equation);
			aCursor.next();
		}

		rVal = (lParams.split(",")).length > 0 ? new ArrayList<String>(Arrays.asList(lParams.split(","))) : rVal;
		
		// skip last closing paranthesis
		aCursor.next();
		
		return rVal;
	}
	
	@Override
	protected IEquation _parseFunctionCall(String equation, ParserCursor aCursor)
	{
		IO.SysOutV("init, current char: "+aCursor.get(equation));
		String lName = _parseIdentifier(equation, aCursor);
		
		for(String iParam:mParamNames)IO.SysOutV("Param = "+iParam);
		
		// if is a function param, return a new variable
		if(mParamNames.contains(lName))
		{
			IO.SysOutV("Name is a param");
			Variable lVar = new Variable(lName);
			mTopLevelParams.add(lVar);
			return lVar;
		}
		
		
		Equation lFcn = EquationFactory.createParamFuncionEquation(lName);
		if(lFcn!=null)
		{
			IO.SysOutV("Found function, name is "+lFcn);
			ArrayList<String> lParamStrs = _getFcnParams(equation, aCursor);
			for(String iParamStr:lParamStrs) lFcn.addParam(_parseEquation(iParamStr,new ParserCursor()));
		}
		
		return lFcn;
	}
	
	/**
	 * [restricted] get new equation. Can be used to override datatype.
	 *
	 * @return the linear equation
	 */
	@Override
	protected LinearEquation _getNewEquation()
	{
		return new ParamLinearEquation();
	}
	
}
